<?xml version="1.0" encoding="UTF-8"?>
<!-- - - Licensed under the Apache License, Version 2.0 (the "License"); 
	- you may not use this file except in compliance with the License. - You 
	may obtain a copy of the License at - - http://www.apache.org/licenses/LICENSE-2.0 
	- - Unless required by applicable law or agreed to in writing, software - 
	distributed under the License is distributed on an "AS IS" BASIS, - WITHOUT 
	WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. - See the 
	License for the specific language governing permissions and - limitations 
	under the License. -->
<!DOCTYPE mycat:rule SYSTEM "rule.dtd">
<mycat:rule xmlns:mycat="http://io.mycat/">

	<!-- 根据 cust_id字段 分片 -->
	<tableRule name="customer_rule">
		<rule>
			<columns>cust_id</columns>
			<algorithm>mod-long</algorithm>
		</rule>
	</tableRule>
	
	<!-- 根据 owner_cust_id字段 分片 -->
	<tableRule name="belong_customer_rule">
		<rule>
			<columns>belong_cust_id</columns>
			<algorithm>mod-long</algorithm>
		</rule>
	</tableRule>
	
	<!-- 根据 owner_cust_id字段 分片 -->
	<tableRule name="prod_offer_inst_rule">
		<rule>
			<columns>owner_cust_id</columns>
			<algorithm>mod-long</algorithm>
		</rule>
	</tableRule>

	<!-- 创建键值对方式规则 -->
	<tableRule name="key_val_tab_log_2_1_2_2_rule">
		<rule>
			<columns>a1</columns>
			<algorithm>key-val-fun</algorithm>	
		</rule>		
	</tableRule>	
	
	<!-- 数字型字段值按区间路由规则 -->
	<tableRule name="int_range_tab_log_2_1_2_3_rule">
		<rule>
			<columns>a1</columns>
			<algorithm>int-range-fun</algorithm>	
		</rule>		
	</tableRule>	
	
	<!-- 字符型字段路由规则 -->
	<tableRule name="char_hash_tab_log_2_1_2_4_rule">
		<rule>
			<columns>a1</columns>
			<algorithm>char-hash-fun</algorithm>	
		</rule>		
	</tableRule>
	
	<!-- 可以扩展的函数路由：数字除100取整再取模 -->
	<tableRule name="cust_tab_log_2_1_2_5_rule">
		<rule>
			<columns>a1</columns>
			<algorithm>cust-hash-fun</algorithm>	
		</rule>		
	</tableRule>		

	<function name="mod-long" class="io.mycat.route.function.PartitionByMod">
		<!-- how many data nodes --> 
		<property name="count">2</property> 
	</function>
	
	<function name="murmur"
		class="io.mycat.route.function.PartitionByMurmurHash">
		<property name="seed">0</property><!-- 默认是0 -->
		<property name="count">2</property><!-- 要分片的数据库节点数量，必须指定，否则没法分片 -->
		<property name="virtualBucketTimes">160</property><!-- 一个实际的数据库节点被映射为这么多虚拟节点，默认是160倍，也就是虚拟节点数是物理节点数的160倍 -->
		<!-- <property name="weightMapFile">weightMapFile</property> 节点的权重，没有指定权重的节点默认是1。以properties文件的格式填写，以从0开始到count-1的整数值也就是节点索引为key，以节点权重值为值。所有权重值必须是正整数，否则以1代替 -->
		<!-- <property name="bucketMapPath">/etc/mycat/bucketMapPath</property> 
			用于测试时观察各物理节点与虚拟节点的分布情况，如果指定了这个属性，会把虚拟节点的murmur hash值与物理节点的映射按行输出到这个文件，没有默认值，如果不指定，就不会输出任何东西 -->
	</function>

	<!-- 创建键值对方式功能函数 -->
	<function name="key-val-fun" class="io.mycat.route.function.PartitionByFileMap">
		<property name="mapFile">key-value-int.txt</property>
		<property name="type">0</property>
		<property name="defaultNode">0</property>		
	</function>
	
	<!-- 数字型字段值按区间路由方式功能函数 -->
	<function name="int-range-fun" class="io.mycat.route.function.AutoPartitionByLong">
		<property name="mapFile">int-range-mod.txt</property>
		<property name="defaultNode">0</property>		
	</function>
	
	<!-- 字符型字段方式功能函数 -->
	<function name="char-hash-fun" class="io.mycat.route.function.PartitionByPrefixPattern">
		<property name="prefixLength">64</property> 
		<property name="patternValue">2</property>
		<property name="mapFile">char-hash-mod.txt</property>
	</function>
	
	<!-- 可以扩展的函数路由：数字除100取整再取模 -->
	<function name="cust-hash-fun" class="com.ztesoft.route.function.Custom1Router">
		<property name="dividendValue">100</property> 
		<property name="patternValue">2</property>
		<property name="mapFile">cust-hash-mod.txt</property>
	</function>
		
</mycat:rule>
